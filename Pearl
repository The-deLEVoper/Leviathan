#include "application.h"
#include "neopixel/neopixel.h" // use for Build IDE
// #include "neopixel.h" // use for local build

/* ======================= prototypes =============================== */

void colorAll(uint32_t c, uint8_t wait);
void colorWipe(uint32_t c, uint8_t wait);
void rainbow(uint8_t wait);
void rainbowCycle(uint8_t wait);
uint32_t Wheel(byte WheelPos);
uint32_t brushingstate(int state0);
int switch0 = D0;
int switch1 = D3;
int led0 = D7;
bool brushing;
int brushtimer;
int buttoncount;
bool check0, check1;
int colorscroll;
bool flash;
int flashcount;
int state0;
bool waiting;
int waittimer;
bool buttonpress;
bool flosssent;

/* ======================= extra-examples.cpp ======================== */

SYSTEM_MODE(AUTOMATIC);

// IMPORTANT: Set pixel COUNT, PIN and TYPE
#define PIXEL_COUNT 1
#define PIXEL_PIN D2
#define PIXEL_PIN2 D4
#define PIXEL_TYPE WS2812B

// Parameter 1 = number of pixels in strip
//               note: for some stripes like those with the TM1829, you
//                     need to count the number of segments, i.e. the
//                     number of controllers in your stripe, not the number
//                     of individual LEDs!
// Parameter 2 = pin number (most are valid)
//               note: if not specified, D2 is selected for you.
// Parameter 3 = pixel type [ WS2812, WS2812B, WS2812B2, WS2811,
//                             TM1803, TM1829, SK6812RGBW ]
//               note: if not specified, WS2812B is selected for you.
//               note: RGB order is automatically applied to WS2811,
//                     WS2812/WS2812B/WS2812B2/TM1803 is GRB order.
//
// 800 KHz bitstream 800 KHz bitstream (most NeoPixel products
//               WS2812 (6-pin part)/WS2812B (4-pin part)/SK6812RGBW (RGB+W) )
//
// 400 KHz bitstream (classic 'v1' (not v2) FLORA pixels, WS2811 drivers)
//                   (Radio Shack Tri-Color LED Strip - TM1803 driver
//                    NOTE: RS Tri-Color LED's are grouped in sets of 3)

Adafruit_NeoPixel strip = Adafruit_NeoPixel(PIXEL_COUNT, PIXEL_PIN, PIXEL_TYPE);
Adafruit_NeoPixel strip2 = Adafruit_NeoPixel(PIXEL_COUNT, PIXEL_PIN2, PIXEL_TYPE);

// IMPORTANT: To reduce NeoPixel burnout risk, add 1000 uF capacitor across
// pixel power leads, add 300 - 500 Ohm resistor on first pixel's data input
// and minimize distance between Arduino and first pixel.  Avoid connecting
// on a live circuit...if you must, connect GND first.

void setup() {
  strip.begin();
  strip.show(); // Initialize all pixels to 'off'
  strip2.begin();
  strip2.show(); // Initialize all pixels to 'off'
  pinMode(switch0, INPUT_PULLDOWN);
  pinMode(switch1, INPUT_PULLDOWN);
  pinMode(led0, OUTPUT);
  brushing = false;
  brushtimer = 0;
  strip.setPixelColor(0, strip.Color(0, 0, 0));
  strip2.setPixelColor(0, strip2.Color(0, 0, 0));
  buttoncount=0;
  colorscroll=0;
  flash = false;
  flashcount = 0;
  state0=0;
  waiting = false;
  waittimer = 0;
  buttonpress = false;
  flosssent = false;
}

void loop() {
  check0=digitalRead(switch0);
    if (check0){
        if (buttoncount <100){
            buttonpress = true;
            buttoncount = 0;
            digitalWrite(led0, HIGH);
        }
        else{
            ++buttoncount;
        }
    }
    else{
        buttonpress = false;
        buttoncount = 0;
        digitalWrite(led0, LOW);
    }
    
  check1=digitalRead(switch1);   
  if (check1){
        strip2.setPixelColor(0, strip2.Color(0, 255, 0));
        strip2.show();
        if(!flosssent){
            Particle.publish("Dental Entry", "Floss");
            flosssent = true;
        }
  }
  else{
        strip2.setPixelColor(0, strip2.Color(0, 0, 0));
        strip2.show();
        flosssent = false;
  }
switch(state0){
    case 0:
    delay(10);
    if(buttonpress){
        state0 = 1;
    }
    //off
    break;
    case 1:
    //brushing
        delay(50);
        if(brushtimer<2350){
            ++brushtimer;
        }
        else{
             brushtimer = 0;
             state0 = 2;
        }
        break;
    case 2:
    //waiting
        if(buttonpress){
            waittimer = 0;
            state0 = 3;
        }
        else if(waittimer<1200){
              ++waittimer;
          }
        else{
              waittimer = 0;
              state0 = 0;
          }
        delay(50);
    break;
    case 3:
    //wait for button off
        if(!buttonpress){
            state0=0;
            Particle.publish("Dental Entry", "Brush");
        }
    }
strip.setPixelColor(0, brushingstate(state0)); 
strip.show();
}




uint32_t brushingstate(int state0){
      switch(state0){
          case 0:
              return strip.Color(0, 0, 0);
          break;
          case 1:
               if(colorscroll >255){
                    colorscroll = 0;
               }
                ++colorscroll;
              return Wheel((colorscroll) & 255);
          break;
          case 2:
              if(flashcount>15){
                  flash = !flash;
                  flashcount = 0;
              }
              ++flashcount;
              if(flash){
                  return strip.Color(0, 0, 255);
              }
              else{
                  return strip.Color(255, 0, 0);
              }
          break;
      }
  }

// Set all pixels in the strip to a solid color, then wait (ms)
void colorAll(uint32_t c, uint8_t wait) {
  uint16_t i;

  for(i=0; i<strip.numPixels(); i++) {
    strip.setPixelColor(i, c);
  }
  strip.show();
  delay(wait);
}

// Fill the dots one after the other with a color, wait (ms) after each one
void colorWipe(uint32_t c, uint8_t wait) {
  for(uint16_t i=0; i<strip.numPixels(); i++) {
    strip.setPixelColor(i, c);
    strip.show();
    delay(wait);
  }
}

void rainbow(uint8_t wait) {
  uint16_t i, j;

  for(j=0; j<256; j++) {
    for(i=0; i<strip.numPixels(); i++) {
      strip.setPixelColor(i, Wheel((i+j) & 255));
    }
    strip.show();
    delay(wait);
  }
}

// Slightly different, this makes the rainbow equally distributed throughout, then wait (ms)
void rainbowCycle(uint8_t wait) {
  uint16_t i, j;

  for(j=0; j<256; j++) { // 1 cycle of all colors on wheel
    for(i=0; i< strip.numPixels(); i++) {
      strip.setPixelColor(i, Wheel(((i * 256 / strip.numPixels()) + j) & 255));
    }
    strip.show();
    delay(wait);
  }
}

// Input a value 0 to 255 to get a color value.
// The colours are a transition r - g - b - back to r.
uint32_t Wheel(byte WheelPos) {
  if(WheelPos < 85) {
   return strip.Color(WheelPos * 3, 255 - WheelPos * 3, 0);
  } else if(WheelPos < 170) {
   WheelPos -= 85;
   return strip.Color(255 - WheelPos * 3, 0, WheelPos * 3);
  } else {
   WheelPos -= 170;
   return strip.Color(0, WheelPos * 3, 255 - WheelPos * 3);
  }
}
